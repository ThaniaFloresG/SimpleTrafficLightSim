VGA Sync:

`timescale 1ns / 1ps
module vga_sync(clock_50Mhz, red, green, blue, red_out, green_out, blue_out, horiz_sync_out, vert_sync_out, video_on, pixel_clock, pixel_row, pixel_column);
 
 input clock_50Mhz, red, green, blue;
 output [9:0]red_out;
   output [9:0]green_out;
   output [9:0] blue_out;
 output horiz_sync_out, vert_sync_out, video_on, pixel_clock;
 //video_on same as blank
 output [10:0] pixel_row, pixel_column;
 
 reg pixel_clock_int;
 
 reg [10:0] pixel_row = 0,pixel_column = 0;
 reg [10:0] h_count = 0,v_count= 0;
 reg horiz_sync, vert_sync;
 reg video_on_v = 0, video_on_h = 0;
 wire video_on_int;
 
 //Parameters
 //Horizontal Timing Constraints
 parameter H_pixels_across  = 640;
 parameter H_sync_low   = 664;
 parameter H_sync_high  = 760;
 parameter H_end_count   = 800;
 //Vertical Timing Constraints
 parameter V_pixels_down  = 480;
 parameter V_sync_low   = 491;
 parameter V_sync_high  = 493;
 parameter V_end_count  = 525;
assign pixel_clock   = pixel_clock_int;
assign horiz_sync_out  = horiz_sync;
assign vert_sync_out  = vert_sync;
// video_on is high only when RGB pixel data is being displayed
// used to blank color signals at screen edges during retrace
assign video_on_int = video_on_h&video_on_v;
assign video_on  = video_on_int;
assign red_out  = {10{red&video_on_int}};
assign green_out  = {10{green&video_on_int}};
assign blue_out  = {10{blue&video_on_int}};
always@(posedge pixel_clock_int) begin
 /*Generate Horizontal and Vertical Timing Signals for Video Signals
  h_count counts pixels (#pixels across + extra time for sync signals)
 
  Horiz_sync ---------------------------------__________--------
  H-count	0        	# pixels        	sync low   	end
 */
 
 //h_count
 if (h_count == H_end_count)
  h_count = 0;
 else
  h_count = h_count+1;
 
 //generate horizontal sync signal using h_count
 if (h_count<=H_sync_high && h_count>=H_sync_low)
  horiz_sync =0;
 else
  horiz_sync =1;
 
 /*
 V_count counts rows of pixels (#pixel rows down + extra time for V sync signal)
 Vert_sync  	----------------------------------------------_______-------------
 V_count     	0                    	last pixel row  	V sync low   	end
 */
 
 if (v_count >= V_end_count && h_count >= H_sync_low)
	v_count = 0;
 else if (h_count == H_sync_low)
	v_count = v_count + 1;
 //Generate Vertical Sync Signal using V_count
 if (v_count <= V_sync_high &&v_count >= V_sync_low)
	vert_sync = 0;
 else
	vert_sync = 1;
 // Generate Video on Screen Signals for Pixel Data
 // Video on = 1 indicates pixel are being displayed
 // Video on = 0 retrace - user logic can update pixel
 // memory without needing to read memory for display
 if (h_count < H_pixels_across) begin
	video_on_h = 1;
	pixel_column = h_count;
 end
 else
	video_on_h = 0;
 if (v_count <= V_pixels_down) begin
	video_on_v = 1;
	pixel_row = v_count;
 end
 else
	video_on_v = 0;
 
end
 
//Clock divide to 25Mhz
always@(posedge clock_50Mhz) begin
 pixel_clock_int = ~pixel_clock_int;
end
endmodule
